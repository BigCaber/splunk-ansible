---
- name: Init vars
  set_fact:
    stream_pipeline_spl2: '| from receive_from_forwarders("forwarders:all") | eval extracted_body=extract_key_value(cast(body, "string"), "=", " ") | into index("", "main");'
    stream_pipeline_name: grandhack
    stream_pipeline_desc: "For hackathon"

- name: Init vars for file
  set_fact:
    stream_pipeline_spec_file: "{{ splunk.home }}/etc/{{ stream_pipeline_name }}-spec.json"

- name: Generate data stream pipeline specification
  become: yes
  become_user: "{{ splunk.user }}"
  block:
  - name: Find existing spec
    stat:
      path: "{{ stream_pipeline_spec_file }}"
    register: pipe_spec

  - name: Read existing spec
    command: "cat {{ stream_pipeline_spec_file }}"
    when: pipe_spec.stat.exists
    register: pipe_spec_def

  - name: Generate new spec
    command: "scloud streams compile --spl '{{ stream_pipeline_spl2 }}' --validate true"
    register: gen_pipe_spec

  - name: Overwrite spec
    blockinfile:
      path: "{{ splunk.home }}/etc/{{ stream_pipeline_name }}-spec.json"
      block: "{{ gen_pipe_spec.stdout }}"
      owner: "{{ splunk.user }}"
      group: "{{ splunk.group }}"
    when: not pipe_spec.stat.exists or gen_pipe_spec.stdout != pipe_spec_def.stdout
    register: write_pipe_spec

- name: Get pipeline
  command: "scloud streams list-pipelines --name {{ stream_pipeline_name }}"
  register: get_pipe

- name: Create pipeline
  command: "scloud streams create-pipeline --name '{{ stream_pipeline_name }}' --description '{{ stream_pipeline_desc }}' --input-datafile '{{ stream_pipeline_spec_file }}'"
  when: get_pipe.stdout | from_json | json_query("total") | int == 0
  register: create_pipe

- name: Find pipeline ID
  set_fact:
    stream_pipeline_id: "{{ create_pipe.stdout | from_json | json_query('id') if create_pipe is defined and create_pipe.stdout is defined else get_pipe.stdout | from_json | json_query('items[0].id') }}"

- name: Update pipeline
  command: "scloud streams update-pipeline --name '{{ stream_pipeline_name }}' --id {{ stream_pipeline_id }} --description '{{ stream_pipeline_desc }}' --input-datafile {{ stream_pipeline_spec_file }}"
  when: write_pipe_spec is changed
  register: update_pipe

- name: Activate pipeline
  command: "scloud streams activate-pipeline --id {{ stream_pipeline_id }}"
  when: create_pipe is changed or update_pipe is changed
